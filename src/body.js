// Generated by CoffeeScript 1.9.1
var Body, Lexer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Lexer = require('./lexer');

Body = (function() {
  function Body(data) {
    this.slab = bind(this.slab, this);
    this.body = bind(this.body, this);
    this.lex = new Lexer(data);
  }

  Body.prototype.body = function(header, index) {
    var dim, dimensions, j, key, len, variable;
    key = Object.keys(header.variables)[index];
    variable = header.variables[key];
    dimensions = variable.dimensions.map(function(i) {
      return header.dimensions[i];
    });
    for (j = 0, len = dimensions.length; j < len; j++) {
      dim = dimensions[j];
      if (dim.length === null) {
        dim.length = header.records.number;
      }
    }
    this.lex.go(variable.offset);
    return {
      key: key,
      variable: variable,
      dimensions: dimensions
    };
  };

  Body.prototype.slab = function(dimensions, index, convert) {
    var dim, j, ref, results;
    if (dimensions.length <= index) {
      return this.lex.byte();
    }
    dim = dimensions[index];
    results = [];
    for (j = 0, ref = dim.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--) {
      results.push(this.slab(dimensions, index + 1));
    }
    return results;
  };

  return Body;

})();

module.exports = Body;
