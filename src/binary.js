// Generated by CoffeeScript 1.9.1
var pow2, writeFloat;

pow2 = function(n) {
  if (n >= 0 && n < 31) {
    return 1 << n;
  } else {
    return pow2[n] || (pow2[n] = Math.pow(2, n));
  }
};

writeFloat = function(value, mantSize, expSize) {
  var b, eMax, eMin, exponent, mantissa, signBit;
  signBit = value < 0 ? 1 : 0;
  exponent = void 0;
  mantissa = void 0;
  eMax = ~(-1 << expSize - 1);
  eMin = 1 - eMax;
  if (value < 0) {
    value = -value;
  }
  if (value === 0) {
    exponent = 0;
    mantissa = 0;
  } else if (isNaN(value)) {
    exponent = 2 * eMax + 1;
    mantissa = 1;
  } else if (value === Infinity) {
    exponent = 2 * eMax + 1;
    mantissa = 0;
  } else {
    exponent = Math.floor(Math.log(value) / Math.LN2);
    if (exponent >= eMin && exponent <= eMax) {
      mantissa = Math.floor((value * pow2(-exponent) - 1) * pow2(mantSize));
      exponent += eMax;
    } else {
      mantissa = Math.floor(value / pow2(eMin - mantSize));
      exponent = 0;
    }
  }
  b = [];
  while (mantSize >= 8) {
    b.push(mantissa % 256);
    mantissa = Math.floor(mantissa / 256);
    mantSize -= 8;
  }
  exponent = exponent << mantSize | mantissa;
  expSize += mantSize;
  while (expSize >= 8) {
    b.push(exponent & 0xff);
    exponent >>>= 8;
    expSize -= 8;
  }
  b.push(signBit << expSize | exponent);
  return b;
};

module.exports = {
  readFloat: function(b) {
    var exponent, mantissa, sign;
    sign = 1 - 2 * (b[0] >> 7);
    exponent = (b[0] << 1 & 0xff | b[1] >> 7) - 127;
    mantissa = (b[1] & 0x7f) << 16 | b[2] << 8 | b[3];
    if (exponent === 128) {
      if (mantissa !== 0) {
        return NaN;
      } else {
        return sign * Infinity;
      }
    }
    if (exponent === -127) {
      return sign * mantissa * pow2(-126 - 23);
    }
    return sign * (1 + mantissa * pow2(-23)) * pow2(exponent);
  },
  readDouble: function(b) {
    var exponent, mantissa, sign;
    sign = 1 - 2 * (b[0] >> 7);
    exponent = ((b[0] << 1 & 0xff) << 3 | b[1] >> 4) - ((1 << 10) - 1);
    mantissa = (b[1] & 0x0f) * pow2(48) + b[2] * pow2(40) + b[3] * pow2(32) + b[4] * pow2(24) + b[5] * pow2(16) + b[6] * pow2(8) + b[7];
    if (exponent === 1024) {
      if (mantissa !== 0) {
        return NaN;
      } else {
        return sign * Infinity;
      }
    }
    if (exponent === -1023) {
      return sign * mantissa * pow2(-1022 - 52);
    }
    return sign * (1 + mantissa * pow2(-52)) * pow2(exponent);
  },
  writeFloat: function(value) {
    return writeFloat(value, 23, 8);
  },
  writeDouble: function(value) {
    return writeFloat(value, 52, 11);
  }
};
