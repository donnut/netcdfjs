// Generated by CoffeeScript 1.8.0
var TextDecoder, convert, decoder, test;

TextDecoder = require('text-encoding').TextDecoder;

decoder = new TextDecoder('utf-8');

test = {
  isFFFFFFFF: (function(_this) {
    return function(data) {
      return data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255;
    };
  })(this),
  isZero: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 0;
    };
  })(this),
  isDimension: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 10;
    };
  })(this),
  isVariable: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 11;
    };
  })(this),
  isAttribute: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 12;
    };
  })(this),
  isByte: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 1;
    };
  })(this),
  isChar: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 2;
    };
  })(this),
  isShort: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 3;
    };
  })(this),
  isInt: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 4;
    };
  })(this),
  isFloat: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 5;
    };
  })(this),
  isDouble: (function(_this) {
    return function(data) {
      return data[0] === 0 && data[1] === 0 && data[2] === 0 && data[3] === 6;
    };
  })(this)
};

convert = {
  uint64: (function(_this) {
    return function(data) {
      return data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7];
    };
  })(this),
  uint32: (function(_this) {
    return function(data) {
      return data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
    };
  })(this),
  uint16: (function(_this) {
    return function(data) {
      return data[0] << 8 | data[1];
    };
  })(this),
  string: (function(_this) {
    return function(data) {
      return decoder.decode(data);
    };
  })(this),
  bytes: (function(_this) {
    return function(data) {
      return data;
    };
  })(this),
  shorts: (function(_this) {
    return function(data) {};
  })(this),
  ints: (function(_this) {
    return function(data) {};
  })(this),
  floats: (function(_this) {
    return function(data) {};
  })(this),
  doubles: (function(_this) {
    return function(data) {};
  })(this),
  type: (function(_this) {
    return function(data) {
      if (test.isByte(data)) {
        return 'byte';
      }
      if (test.isChar(data)) {
        return 'char';
      }
      if (test.isShort(data)) {
        return 'short';
      }
      if (test.isInt(data)) {
        return 'int';
      }
      if (test.isFloat(data)) {
        return 'float';
      }
      if (test.isDouble(data)) {
        return 'double';
      }
      return null;
    };
  })(this),
  converter: (function(_this) {
    return function(data) {
      var converter;
      converter = {
        byte: {
          bytes: 1,
          convert: convert.bytes
        },
        char: {
          bytes: 1,
          convert: convert.string
        },
        short: {
          bytes: 2,
          convert: convert.shorts
        },
        int: {
          bytes: 4,
          convert: convert.ints
        },
        float: {
          bytes: 4,
          convert: convert.floats
        },
        double: {
          bytes: 4,
          convert: convert.doubles
        }
      };
      return converter[convert.type(data)];
    };
  })(this)
};

module.exports = {
  decoder: decoder,
  test: test,
  convert: convert
};
