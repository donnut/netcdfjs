// Generated by CoffeeScript 1.8.0
var Lexer, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

util = require('./util');

module.exports = Lexer = (function() {
  function Lexer(data) {
    this.print = __bind(this.print, this);
    this.uint64 = __bind(this.uint64, this);
    this.uint32 = __bind(this.uint32, this);
    this.uint16 = __bind(this.uint16, this);
    this.string = __bind(this.string, this);
    this.fill = __bind(this.fill, this);
    this.bytes = __bind(this.bytes, this);
    this.hex = __bind(this.hex, this);
    this.char = __bind(this.char, this);
    this.byte = __bind(this.byte, this);
    this.next = __bind(this.next, this);
    this.hasMore = __bind(this.hasMore, this);
    this._data = data;
    this._index = 0;
    this._length = data.length;
  }

  Lexer.prototype.hasMore = function() {
    return this._index < this._length;
  };

  Lexer.prototype.next = function() {
    return this._index++;
  };

  Lexer.prototype.byte = function() {
    var result;
    result = this._data[this._index];
    this.next();
    return result;
  };

  Lexer.prototype.char = function() {
    return String.fromCharCode(this.byte());
  };

  Lexer.prototype.hex = function() {
    return this.byte().toString(16);
  };

  Lexer.prototype.bytes = function(n) {
    var result;
    if (this._index + n > this._length || n === 0) {
      return null;
    }
    result = this._data.subarray(this._index, this._index + n);
    this._index += n;
    return result;
  };

  Lexer.prototype.fill = function(n) {
    var b;
    b = Math.ceil(n / 4) * 4 - n;
    if (b === 0) {
      return;
    }
    return this.bytes(b);
  };

  Lexer.prototype.string = function(n) {
    var result;
    result = this.bytes(n);
    if (result === null) {
      return null;
    }
    return util.decoder.decode(result);
  };

  Lexer.prototype.uint16 = function() {
    return util.convert.uint16(this.bytes(2));
  };

  Lexer.prototype.uint32 = function() {
    return util.convert.uint32(this.bytes(4));
  };

  Lexer.prototype.uint64 = function() {
    return util.convert.uint64(this.bytes(8));
  };

  Lexer.prototype.print = function() {
    var a, b, c, i, index, _i, _results;
    index = this._index;
    a = (function(_this) {
      return function() {
        var res;
        res = _this._data[index].toString(16);
        index++;
        if (res.length === 1) {
          return "0" + res;
        }
        return res;
      };
    })(this);
    b = function() {
      return "" + (a()) + (a()) + (a()) + (a());
    };
    c = function() {
      console.log();
      console.log("" + (b()) + " " + (b()) + " " + (b()) + " " + (b()));
      console.log("" + (b()) + " " + (b()) + " " + (b()) + " " + (b()));
      console.log("" + (b()) + " " + (b()) + " " + (b()) + " " + (b()));
      return console.log("" + (b()) + " " + (b()) + " " + (b()) + " " + (b()));
    };
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      _results.push(c());
    }
    return _results;
  };

  return Lexer;

})();
